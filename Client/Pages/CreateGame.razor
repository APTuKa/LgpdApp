@page "/create-game/{TemplateId:guid}"
@using LgpdApp.Client.Shared.DTOs
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

<h3>Создание игры</h3>

@if (template == null)
{
    <p>Загрузка шаблона...</p>
}
else
{
    <EditForm Model="gameModel" OnValidSubmit="SubmitGame">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Название игры</label>
            <InputText @bind-Value="gameModel.Name" class="form-control" />
            <ValidationMessage For="@(() => gameModel.Name)" />
        </div>

        @foreach (var param in template.Parameters)
        {
            <div class="mb-3">
                <label>@param.Name</label>

                @if (param.Type == "enum")
                {
                    <InputSelect @bind-Value="gameModel.Parameters[param.Name]" class="form-select">
                        @foreach (var option in param.Options)
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                }

                else if (param.Type == "int")
                {
                    <InputNumber @bind-Value="gameModel.Parameters[param.Name]" class="form-control" />
                }

                else if (param.Type == "string")
                {
                    <InputText @bind-Value="gameModel.Parameters[param.Name]" class="form-control" />
                }

                else if (param.Type == "bool")
                {
                   <InputCheckbox @bind-Checked="@gameModel.Parameters[param.Name]" />
                }

                else if (param.Type == "imageOrColor")
                {
                    <div class="d-flex gap-2 align-items-center">
                        <select class="form-select" @bind="gameModel.Parameters[param.Name]">
                            <option value="">-- Выберите изображение --</option>
                            @foreach (var image in images)
                            {
                                <option value="@image.Id.ToString()">@image.Path</option>
                            }
                        </select>
                        <input type="color" @bind="gameModel.Parameters[param.Name]" />
                    </div>
                }

                else if (param.Type == "list")
                {
                    <button type="button" class="btn btn-sm btn-secondary mb-2" @onclick="AddPair">+ Добавить пару</button>
                    @for (int i = 0; i < cardPairs.Count; i++)
                    {
                        <div class="row mt-2">
                            <div class="col">
                                <input class="form-control" placeholder="Левая часть" @bind-value="cardPairs[i].Left" />
                            </div>
                            <div class="col">
                                <input class="form-control" placeholder="Правая часть" @bind-value="cardPairs[i].Right" />
                            </div>
                        </div>
                    }
                }

                else if (param.Type == "object")
                {
                    <div class="mb-3">
                        <input type="text" class="form-control" placeholder="Тип (text/image)" @bind-value="centerType" />
                        <input type="text" class="form-control mt-1" placeholder="Содержимое" @bind-value="centerContent" />
                    </div>
                }

                else
                {
                    <InputText @bind-Value="gameModel.Parameters[param.Name]" class="form-control" />
                }
            </div>
        }

        <button type="submit" class="btn btn-success">Сохранить игру</button>
    </EditForm>
}

@code {
@inject AuthenticationStateProvider AuthenticationStateProvider
private Task<AuthenticationState> authenticationStateTask;

protected override void OnInitialized()
{
    authenticationStateTask = AuthenticationStateProvider.GetAuthenticationStateAsync();
}
    [Parameter] public Guid TemplateId { get; set; }

    private TemplateDto template;
    private CreateGameModel gameModel = new();
    private List<CardPair> cardPairs = new();
    private List<ImageDto> images = new();

    private string centerType = "text";
    private string centerContent = "";


    protected override async Task OnInitializedAsync()
    {
        // Загружаем шаблон по ID
        template = await Http.GetFromJsonAsync<TemplateDto>($"api/templates/{TemplateId}");
        gameModel.Parameters = new Dictionary<string, string>();

        foreach (var p in template.Parameters)
        {
            gameModel.Parameters[p.Name] = p.Options?.FirstOrDefault() ?? "";
        }

        // Загружаем изображения для выбора
        images = await Http.GetFromJsonAsync<List<ImageDto>>("api/images");
    }

    private void AddPair()
    {
        cardPairs.Add(new CardPair());
    }

    private async Task SubmitGame()
    {
        // Обработка списка карточек
        if (cardPairs.Count > 0)
        {
            var pairsJson = JsonSerializer.Serialize(cardPairs.Select(p => new Dictionary<string, object>
            {
                { "type", "pair" },
                { "left", p.Left },
                { "right", p.Right }
            }));
            gameModel.Parameters["Карточки/Пары"] = pairsJson;
        }

        // Обработка объекта
        if (!string.IsNullOrEmpty(centerType) && !string.IsNullOrEmpty(centerContent))
        {
            var centerJson = JsonSerializer.Serialize(new Dictionary<string, string>
            {
                { "type", centerType },
                { "content", centerContent }
            });
            gameModel.Parameters["Центральный объект"] = centerJson;
        }

        // Формируем запрос
        var request = new CreateGameRequest
        {
            Name = gameModel.Name,
            TemplateId = TemplateId,
            Parameters = gameModel.Parameters
        };

        // Получаем токен
        var token = await LocalStorage.GetItemAsStringAsync("authToken");
        var authState = await authenticationStateTask;
        var user = authState.User;

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim == null || string.IsNullOrEmpty(userIdClaim.Value))
        {
            Console.WriteLine("Ошибка: пользователь не авторизован.");
            return;
        }

        var createdByGuid = Guid.Parse(userIdClaim.Value);

        var result = await Http.PostAsJsonAsync("api/games", request);
        if (result.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/games");
        }
        else
        {
            var problem = await result.Content.ReadFromJsonAsync<ProblemDetails>();
            Console.WriteLine(problem.Detail);
        }
    }

    private class CardPair
    {
        public string Left { get; set; }
        public string Right { get; set; }
    }

    public class CreateGameModel
    {
        [Required(ErrorMessage = "Название игры обязательно.")]
        public string Name { get; set; } = "";

        public Dictionary<string, string> Parameters { get; set; } = new();
    }
}