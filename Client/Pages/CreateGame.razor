@page "/create-game/{TemplateId:guid}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<h3 class="text-2xl mb-4">Создание игры</h3>

@if (template == null)
{
    <p>Загрузка шаблона...</p>
}
else
{
    <EditForm Model="@gameModel" OnValidSubmit="@HandleCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Название игры</label>
            <InputText class="form-control" @bind-Value="gameModel.Name" />
        </div>

        <h5>Параметры шаблона:</h5>
        @foreach (var param in template.Parameters)
        {
            <div class="mb-3">
                <label>@param.Name</label>

                @if (param.Type == "enum")
                {
                    <InputSelect class="form-control" @bind-Value="gameModel.Parameters[param.Name]">
                        @foreach (var option in param.Options)
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                }
                else if (param.Type == "image" || param.Type == "imageOrColor")
                {
                    <InputText class="form-control" placeholder="ImageId или Hex" @bind-Value="gameModel.Parameters[param.Name]" />
                }
               else if (param.Type == "list")
{

    <div class="border p-3 mb-3">
        <h5>Редактор карточек/пар</h5>

        @foreach (var item in gameModel.CardPairs)
        {
            <div class="card mb-2 p-2">
                <div class="row">
                    <div class="col-md-5">
                        <label>Левая часть (текст или ImageId)</label>
                        <InputText class="form-control" @bind-Value="item.LeftContent" />
                        <select class="form-select mt-1" @bind="item.LeftType">
                            <option value="text">Текст</option>
                            <option value="image">Картинка (ImageId)</option>
                        </select>
                    </div>

                   <div class="col-md-5">
    <label>Левая часть (текст или картинка)</label>

    @if (item.LeftType == "text")
    {
        <InputText class="form-control mb-2" placeholder="Введите текст" @bind-Value="item.LeftContent" />
    }
    else if (item.LeftType == "image")
    {
        <select class="form-select mb-2" @bind="item.LeftContent">
            <option value="">Выберите изображение</option>
            @foreach (var img in availableImages)
            {
                <option value="@img.Id">@img.Path</option>
            }
        </select>

        @if (!string.IsNullOrEmpty(item.LeftContent))
        {
            var selectedImage = availableImages.FirstOrDefault(i => i.Id.ToString() == item.LeftContent);
            if (selectedImage != null)
            {
                <img src="@selectedImage.Path" alt="Превью" style="max-width: 100px;" />
            }
        }
    }

    <select class="form-select mt-1" @bind="item.LeftType">
        <option value="text">Текст</option>
        <option value="image">Картинка</option>
    </select>
</div>



                    <div class="col-md-2 d-flex align-items-center">
                        <div class="form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="item.IsCorrect" />
                            <label class="form-check-label">Правильный</label>
                        </div>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => RemoveCardPair(item)">Удалить</button>
                    </div>
                </div>
            </div>
        }

        <button class="btn btn-secondary mt-2" @onclick="AddCardPair">Добавить карточку/пару</button>
    </div>
}
                else
                {
                    <InputText class="form-control" @bind-Value="gameModel.Parameters[param.Name]" />
                }
            </div>
        }

        <button class="btn btn-success" type="submit">Создать игру</button>
    </EditForm>
}

@code {
    [Parameter] public Guid TemplateId { get; set; }

    private TemplateDto template;
    private CreateGameModel gameModel = new CreateGameModel();

    public class CreateGameModel
{
    [Required]
    public string Name { get; set; }
    public Dictionary<string, string> Parameters { get; set; } = new();
    public List<CardPairModel> CardPairs { get; set; } = new();
}

public class CardPairModel
{
    public string LeftType { get; set; } = "text";      // text или image
    public string LeftContent { get; set; }
    public string RightType { get; set; } = "text";     // text или image
    public string RightContent { get; set; }
    public bool IsCorrect { get; set; }                 // чекбокс (если нужно)
}

private void AddCardPair()
{
    gameModel.CardPairs.Add(new CardPairModel());
}

private void RemoveCardPair(CardPairModel item)
{
    gameModel.CardPairs.Remove(item);
}


    protected override async Task OnInitializedAsync()
    {
        // Загружаем шаблон
        template = await Http.GetFromJsonAsync<TemplateDto>($"/api/templates/{TemplateId}");

        // Загружаем изображения
        var token = await localStorage.GetItemAsync<string>("authToken");
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        availableImages = await Http.GetFromJsonAsync<List<ImageDto>>("/api/images");

    }

    private async Task HandleCreate()
    {
        foreach (var card in gameModel.CardPairs)
{
    if (card.LeftType == "text" && string.IsNullOrWhiteSpace(card.LeftContent))
    {
        Console.WriteLine("Ошибка: левая часть карточки (текст) пуста");
    }
    if (card.LeftType == "image" && string.IsNullOrWhiteSpace(card.LeftContent))
    {
        Console.WriteLine("Ошибка: левая часть карточки (картинка) не выбрана");
    }

    if (card.LeftType == "text" && string.IsNullOrWhiteSpace(card.RightContent))
    {
        Console.WriteLine("Ошибка: правая часть карточки (текст) пуста");
    }
    if (card.LeftType == "image" && string.IsNullOrWhiteSpace(card.RightContent))
    {
        Console.WriteLine("Ошибка: правая часть карточки (картинка) не выбрана");
    }


    // Аналогично проверка для Right части
}


        //var token = await localStorage.GetItemAsync<string>("authToken");
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);


        if (gameModel.CardPairs.Any())
{
    gameModel.Parameters["Карточки/Пары"] = JsonSerializer.Serialize(gameModel.CardPairs);
}

        var request = new
        {
            Name = gameModel.Name,
            TemplateId = TemplateId,
            Parameters = gameModel.Parameters
        };

        var response = await Http.PostAsJsonAsync("/api/games", request);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/games");  // перенаправление на список игр
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Ошибка: {error}");
        }
    }

    public class TemplateDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public List<TemplateParam> Parameters { get; set; }
    }

    public class TemplateParam
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public List<string> Options { get; set; }
    }


    private List<ImageDto> availableImages = new();

    public class ImageDto
    {
        public Guid Id { get; set; }
        public string Path { get; set; }
    }
    
}
